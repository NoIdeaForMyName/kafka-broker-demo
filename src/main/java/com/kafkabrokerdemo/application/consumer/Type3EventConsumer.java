package com.kafkabrokerdemo.application.consumer;

import com.kafkabrokerdemo.domain.event.Type3Event;
import com.kafkabrokerdemo.domain.event.Type4Event;
import com.kafkabrokerdemo.application.kafkaconfig.KafkaConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

import java.time.Duration;

public class Type3EventConsumer extends EventConsumer {

    private final KafkaProducer<String, String> producer;

    public Type3EventConsumer() {
        super(new Type3Event());
        producer = new KafkaProducer<>(KafkaConfig.properties);
    }

    @Override
    public void run() {
        start = true;
        while(start) {
            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(POLL_DURATION_MS));
            for(ConsumerRecord<String, String> record: records) {
                logger.info("{}; Received message: {}", toString(), record.value());
                ProducerRecord<String, String> type4Record = new ProducerRecord<>(new Type4Event().getTopic(), null, "Message generated by: " + toString());
                producer.send(type4Record, new Callback() {
                    @Override
                    public void onCompletion(RecordMetadata recordMetadata, Exception e) {
                        if (e == null) {
                            logger.info("Record sent successfully:[{}]", new Type4Event().getTopic());
                        }
                        else {
                            logger.error("Some exception occurred: {}", e.getMessage());
                        }
                    }
                });
            }
            consumer.commitSync();
        }
        consumer.close();
        producer.close();
    }

}
